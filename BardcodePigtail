<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Temple of Barcode Pigtails</title>
    <!-- GSAPとTailwind CSSを読み込み -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* デフォルトのフォントをカオスにする */
        @import url('https://fonts.googleapis.com/css2?family=DotGothic16&family=Hachi+Maru+Pop&family=Kiwi+Maru:wght@300&family=Noto+Serif+JP:wght@900&family=Potta+One&display=swap');

        body {
            background-color: #000;
            color: #fff;
            margin: 0;
            padding: 0;
            overflow: hidden; /* カオスが画面外にはみ出てもスクロールバーが出ないようにする */
            cursor: none; /* デフォルトカーソルを非表示 */
            font-family: 'DotGothic16', sans-serif;
        }

        /* カスタムカーソル */
        .cursor {
            position: fixed;
            width: 20px;
            height: 20px;
            border: 2px solid #00ff00;
            border-radius: 50%;
            pointer-events: none; /* カーソルがクリックイベントを邪魔しないように */
            transform: translate(-50%, -50%);
            z-index: 9999;
        }
        .cursor-dot {
            position: fixed;
            width: 4px;
            height: 4px;
            background-color: #00ff00;
            border-radius: 50%;
            pointer-events: none;
            transform: translate(-50%, -50%);
            z-index: 9999;
        }

        /* メインタイトル */
        .main-title {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 5vw;
            font-family: 'Noto Serif JP', serif;
            font-weight: 900;
            z-index: 100;
            white-space: nowrap;
        }
        .main-title span {
            display: inline-block;
        }

        /* バーコードライン */
        .barcode-line {
            position: absolute;
            bottom: 0;
            background-color: white;
            width: 2px;
        }

        /* 飛び交うテキスト */
        .chaos-text {
            position: absolute;
            font-size: 2rem;
            z-index: 50;
            mix-blend-mode: difference; /* 背景色と反転して見やすさを保つ */
        }
        
        .chaos-text-1 { font-family: 'Potta One', cursive; }
        .chaos-text-2 { font-family: 'Hachi Maru Pop', cursive; }
        .chaos-text-3 { font-family: 'Kiwi Maru', serif; }

    </style>
</head>
<body>
    <!-- カスタムカーソル用の要素 -->
    <div class="cursor"></div>
    <div class="cursor-dot"></div>
    
    <!-- メインタイトル。JSで文字を分割してアニメーションさせる -->
    <h1 class="main-title" id="main-title">バーコードおさげの世界へようこそ</h1>

    <!-- JSで動的にカオスなテキストを配置 -->
    <div id="chaos-container"></div>
    
    <!-- JSで動的にバーコードラインを生成 -->
    <div id="barcode-container"></div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const barcodeContainer = document.getElementById('barcode-container');
            const chaosContainer = document.getElementById('chaos-container');
            const mainTitle = document.getElementById('main-title');

            // --- カスタムカーソルの設定 ---
            const cursor = document.querySelector('.cursor');
            const cursorDot = document.querySelector('.cursor-dot');
            const cursorX = gsap.quickTo(cursor, "x", { duration: 0.6, ease: "power3" });
            const cursorY = gsap.quickTo(cursor, "y", { duration: 0.6, ease: "power3" });
            const dotX = gsap.quickTo(cursorDot, "x", { duration: 0.2, ease: "power3" });
            const dotY = gsap.quickTo(cursorDot, "y", { duration: 0.2, ease: "power3" });

            window.addEventListener('mousemove', e => {
                cursorX(e.clientX);
                cursorY(e.clientY);
                dotX(e.clientX);
                dotY(e.clientY);
            });
            
            // クリック時にエフェクト
            document.addEventListener('click', e => {
                gsap.to(cursor, {
                    scale: 2,
                    borderColor: '#ff00ff',
                    duration: 0.1,
                    yoyo: true,
                    repeat: 1
                });
                
                // クリックした場所にカオスな円を生成
                for (let i = 0; i < 10; i++) {
                    const circle = document.createElement('div');
                    circle.style.position = 'absolute';
                    circle.style.left = `${e.clientX}px`;
                    circle.style.top = `${e.clientY}px`;
                    circle.style.width = '10px';
                    circle.style.height = '10px';
                    circle.style.borderRadius = '50%';
                    circle.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;
                    circle.style.pointerEvents = 'none';
                    document.body.appendChild(circle);
                    
                    gsap.to(circle, {
                        x: (Math.random() - 0.5) * 500,
                        y: (Math.random() - 0.5) * 500,
                        opacity: 0,
                        duration: 1 + Math.random(),
                        ease: 'power2.out',
                        onComplete: () => circle.remove()
                    });
                }
            });


            // --- メインタイトルのアニメーション ---
            const text = mainTitle.textContent;
            mainTitle.textContent = '';
            text.split('').forEach(char => {
                const span = document.createElement('span');
                span.textContent = char;
                // 空白文字もアニメーションの対象にするため、&nbsp; を使う
                if (char === ' ') span.innerHTML = '&nbsp;';
                mainTitle.appendChild(span);
            });

            gsap.from('.main-title span', {
                duration: 1.5,
                y: 100,
                opacity: 0,
                rotationZ: () => Math.random() * 180 - 90,
                rotationX: () => Math.random() * 180 - 90,
                stagger: {
                    amount: 1,
                    from: "random"
                },
                ease: 'elastic.out(1, 0.5)',
                delay: 0.5
            });


            // --- バーコードラインの生成とアニメーション ---
            const lineCount = 150;
            for (let i = 0; i < lineCount; i++) {
                const line = document.createElement('div');
                line.classList.add('barcode-line');
                line.style.left = `${(i / lineCount) * 100}%`;
                barcodeContainer.appendChild(line);
            }
            
            // 無限ループするカオスなアニメーションタイムライン
            const tl = gsap.timeline({ repeat: -1, yoyo: true });
            tl.to('.barcode-line', {
                height: () => `${Math.random() * 80 + 10}vh`,
                opacity: () => Math.random() * 0.5 + 0.2,
                backgroundColor: () => (Math.random() > 0.5 ? '#fff' : '#aaa'),
                duration: 2,
                stagger: {
                    amount: 3,
                    from: 'random',
                    ease: 'power2.inOut'
                },
                ease: 'power2.inOut'
            });

            
            // --- カオスなテキストの生成とアニメーション ---
            const chaosTexts = [
                "それは、現代が生んだ奇跡。",
                "二次元と三次元の境界線。",
                "究極のヘアスタイル。",
                "一本一本に宇宙の真理が宿る。",
                "揺れるおさげは、カオスの詩。",
                "WE ❤️ BARCODE PIGTAIL"
            ];
            
            chaosTexts.forEach((txt, i) => {
                const p = document.createElement('p');
                p.textContent = txt;
                p.classList.add('chaos-text', `chaos-text-${(i % 3) + 1}`);
                chaosContainer.appendChild(p);

                // 初期位置をランダムに設定
                gsap.set(p, {
                    x: Math.random() * window.innerWidth,
                    y: Math.random() * window.innerHeight,
                    rotation: Math.random() * 360,
                    scale: Math.random() * 1.5 + 0.5
                });
                
                // 永遠に画面内を漂うアニメーション
                gsap.to(p, {
                    x: `random(0, ${window.innerWidth})`,
                    y: `random(0, ${window.innerHeight})`,
                    rotation: 'random(-360, 360)',
                    scale: 'random(0.5, 2)',
                    duration: 20 + Math.random() * 20,
                    repeat: -1,
                    yoyo: true,
                    ease: 'none'
                });
            });

        });
    </script>
</body>
</html>
